#include "CIAnalysis/CIStudies/interface/AFBModule.hh"

#include "CIAnalysis/CIStudies/interface/GenSimIdentificationModule.hh"
#include "CIAnalysis/CIStudies/interface/RecoIdentificationModule.hh"

#include <iostream>

AFBModule::AFBModule(const GenSimIdentificationModule& genSimModule, const RecoIdentificationModule& recoModule, int minMass, int maxMass, int massInterval) :
  genSim(genSimModule),
  reco(recoModule),
  minMassCut(minMass),
  maxMassCut(maxMass),
  interval(massInterval)
{
}

void AFBModule::initialize()
{
  makeHistogram("GenSimForward", "GenSimForward", interval, minMassCut, maxMassCut);
  makeHistogram("GenSimBackward", "GenSimBackward", interval, minMassCut, maxMassCut);


  makeHistogram("RecoForward", "RecoForward", interval, minMassCut, maxMassCut);
  makeHistogram("RecoBackward", "RecoBackward", interval, minMassCut, maxMassCut);
}

bool AFBModule::process(const edm::EventBase& event)
{
  auto genParticles = genSim.getGenParticles();
  auto genSimCS = genParticles.getCollinsSoper();
  auto genSimInvMass = genParticles.getInvariantMass();

  //std::cout << genSimCS << std::endl;

  auto recoParticles = reco.getRecoCandidates();
  auto recoCS = recoParticles.getCollinsSoper();
  auto recoInvMass = recoParticles.getInvariantMass();

  //std::cout << recoCS << std::endl;

  //fillFB("GenSim", genSimCS, genSimInvMass);
  //fillFB("Reco", recoCS, recoInvMass);

  return true;
}

void AFBModule::fillFB(std::string level, double collinsSoper, double invariantMass)
{
  if (collinsSoper > 0)
    {
      fillHistogram(level + "Forward", invariantMass);
    }
  else
    {
      fillHistogram(level + "Backward", invariantMass);
    }
}
