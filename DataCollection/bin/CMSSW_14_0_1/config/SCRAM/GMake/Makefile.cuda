TOP_LEVEL_VARIABLES+=CUDA_HOST
CUDA_EXTRA_EXT:=cuda.cc $(DEVICE_CC_EXT)
EXTRA_FILE_EXT+=$(CUDA_EXTRA_EXT)
FILE_EXT_CC_MAP+=$(CUDA_EXTRA_EXT)
NonTargetExt+=%_cudadlink.$(OBJEXT)
SET_PRODUCT_VARIABLES += CUDA_DLINK_LIB
AdjustCudaHostFlags=$(foreach x,$2,$(filter-out $(call GetVariable,REM_CUDA_HOST_$x) $(call GetVariable,CUDA_HOST_$x) $(call GetToolFlag,cuda,REM_CUDA_HOST_$x) $(call GetToolFlag,cuda,CUDA_HOST_$x),$(call AdjustFlags,$1,,$x,gcc)) $(call GetVariable,CUDA_HOST_$x) $(call GetToolFlag,cuda,CUDA_HOST_$x))
DLINK_LIBDIR:=$(foreach d,$(strip $(LOCALTOP) $(RELEASETOP) $(FULL_RELEASE_FOR_A_PATCH)),$(if $(strip $(wildcard $(d)/$(SCRAMSTORENAME_STATIC))),-L$(d)/$(SCRAMSTORENAME_STATIC),))
Tool_DependencyCudaDLINK=$(foreach x,$($(1)_LOC_CUDA_DLINK_LIB_ALL),-l$x)
define cuda_dlink_deps
$(addprefix $(WORKINGDIR)/cache/cuda_dlink/,$(foreach u,$($(1)_LOC_USE),$($u)))
endef

define GenerateReleaseCudaDlink
ifneq ($(strip $(1)),)
ifeq ($(strip $(wildcard $(PUB_DIRCACHE_MKDIR)/cuda_dlink_$(2)_release.mk)),)
ifneq ($(strip $(wildcard $(1)/$(PUB_DIRCACHE_MKDIR)/dlink/scram.mk)),)
$$(shell $(CMD_cat) $(1)/$(PUB_DIRCACHE_MKDIR)/dlink/*.mk > $(PUB_DIRCACHE_MKDIR)/cuda_dlink_$(2)_release.mk)
else
$$(shell $(CMD_touch) $(PUB_DIRCACHE_MKDIR)/cuda_dlink_$(2)_release.mk)
endif
endif
-include $(PUB_DIRCACHE_MKDIR)/cuda_dlink_$(2)_release.mk
endif
endef

$(eval $(call GenerateReleaseCudaDlink,$(FULL_RELEASE_FOR_A_PATCH),full))
$(eval $(call GenerateReleaseCudaDlink,$(RELEASETOP),base))

define compile_cuda_common
  $(call run_compile_command,$2,$4,$5,$(NVCC) -x cu $(if $(6),,$(CXX_MMD) $(CXX_MF) $(basename $@).d) -dc $(3) --compiler-options '$(call AdjustCudaHostFlags,$1,CXXFLAGS) $(CXXSHAREDOBJECTFLAGS)',)
endef
define compile_cuda
  $(call compile_cuda_common,$1,$2,$(patsubst -isystem%,-I%,$(call AdjustFlags,$1,,CPPFLAGS,gcc)) $(call AdjustFlags,$1,,CUDA_FLAGS))
endef
define CudaCompileRule
$($(1)_objdir)/%.$(2).$(OBJEXT): $($(1)_srcdir)/%.$(2) $$($(1)_objdir)/precompile
	$$(call compile_cuda,$(1),$(3))
endef

define link_cuda_objs
  @$(startlog_$(1)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Cuda Device Link $@ " &&\
  $(VERB_ECHO) $(SCRAM_PREFIX_COMPILER_COMMAND) "$(NVCC) -dlink $(DLINK_LIBDIR) $(call Tool_DependencyCudaDLINK,$1) $(call AdjustFlags,$1,,CUDA_LDFLAGS CUDA_FLAGS) --compiler-options '$(call AdjustCudaHostFlags,$1,CXXFLAGS) $(CXXSHAREDOBJECTFLAGS)' $2 -o $@" &&\
              ($(SCRAM_PREFIX_COMPILER_COMMAND)  $(NVCC) -dlink $(DLINK_LIBDIR) $(call Tool_DependencyCudaDLINK,$1) $(call AdjustFlags,$1,,CUDA_LDFLAGS CUDA_FLAGS) --compiler-options '$(call AdjustCudaHostFlags,$1,CXXFLAGS) $(CXXSHAREDOBJECTFLAGS)' $2 -o $@) $(endlog_$(1))
endef
define generate_cuda_nv_objs
  @$(startlog_$(1)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Cuda Device Code Obj $@ " &&\
  $(VERB_ECHO) $(SCRAM_PREFIX_COMPILER_COMMAND) "$(CMD_objcopy) -j '.nv*' -j '__nv*' $^ $@" &&\
              ($(SCRAM_PREFIX_COMPILER_COMMAND) $(CMD_objcopy) -j '.nv*' -j '__nv*' $^ $@) $(endlog_$(1))
endef
define generate_cuda_nv_a
  @$(startlog_$(1)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $(SCRAMSTORENAME_STATIC)/$(@F) &&\
  $(CMD_echo) ">> Cuda Device Code library $@ " &&\
  $(VERB_ECHO) $(SCRAM_PREFIX_COMPILER_COMMAND) "$(CMD_ar) crs $@ $^" &&\
              ($(SCRAM_PREFIX_COMPILER_COMMAND)  $(CMD_ar) crs $@ $^) $(endlog_$(1))
endef

#safename, plugin_type
define SetCudaRules
ifeq ($(strip $(filter %LIBRARY,$($(1)_CLASS))$(2)),$($(1)_CLASS))
$(1)_EX_CUDA_DLINK_LIB := $(1)_nv
$(WORKINGDIR)/cache/cuda_dlink/$(1): $($(1)_objdir)/lib$(1)_nv.$(AREXT) $($(1)_cuda_dlink_deps)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
$($(1)_objdir)/lib$(1)_nv.$(AREXT): $(addprefix $($(1)_objdir)/, $(addsuffix _nv.$(OBJEXT),$($(1)_cudafiles)))
	$$(call generate_cuda_nv_a,$1) && $$(call copy_build_product,$(SCRAMSTORENAME_STATIC))
$($(1)_objdir)/%_nv.$(OBJEXT): $($(1)_objdir)/%.$(OBJEXT)
	$$(call generate_cuda_nv_objs,$1)
all_$(1)+=$(PUB_DIRCACHE_MKDIR)/cuda_dlink/$(1).mk
$(PUB_DIRCACHE_MKDIR)/cuda_dlink/$(1).mk: $(PUB_DIRCACHE_MKDIR)/cuda_dlink/scram.mk
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) &&\
	$(CMD_echo) "$(1)_EX_CUDA_DLINK_LIB:=$(1)_nv" > $$@
else
$(WORKINGDIR)/cache/cuda_dlink/$(1): $($(1)_cuda_dlink_deps)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endif
$(1)_cudaobjs := $(addprefix $($(1)_objdir)/, $(addsuffix .$(OBJEXT),$($(1)_cudafiles)))
$($(1)_cudadlink): $$($(1)_cudaobjs) $(WORKINGDIR)/cache/cuda_dlink/$(1)
	$$(call link_cuda_objs,$1,$$($(1)_cudaobjs))
endef

#safename, plugin_type
define AddCudaRules
$(1)_cudafiles    := $(filter $(foreach e,$(CUDASRC_FILES_SUFFIXES) $(CUDA_EXTRA_EXT),%.$e),$($(1)_files))
$(1)_cuda_dlink_deps := $$(call cuda_dlink_deps,$1)
ifneq ($$(strip $$($(1)_cudafiles)),)
$(foreach ext,$(filter $(CUDASRC_FILES_SUFFIXES) $(CUDA_EXTRA_EXT),$($(1)_files_exts)),$$(eval $$(call CudaCompileRule,$(1),$(ext),$(1))))
ifeq ($(strip $(SYNTAX_ONLY)),)
$(1)_cudadlink    := $($(1)_objdir)/$(1)_cudadlink.$(OBJEXT)
$(1)_objs         += $$($(1)_cudadlink)
$(1)_PRE_INIT_FUNC+=$$$$(eval $$$$(call SetCudaRules,$1,$2))
endif
$(1)_LOC_USE      += $(CUDA_TYPE_COMPILER)
else
$(WORKINGDIR)/cache/cuda_dlink/$(1): $$($(1)_cuda_dlink_deps)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endif
endef

$(PUB_DIRCACHE_MKDIR)/cuda_dlink/scram.mk:
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_touch) $@
$(WORKINGDIR)/cache/cuda_dlink/%:
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_touch) $@
